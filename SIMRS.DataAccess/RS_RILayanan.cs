///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'RS_RILayanan'
// Generated by LLBLGen v1.21.2003.712 Final on: 13 November 2007, 02:49:36
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace SIMRS.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'RS_RILayanan'.
	/// </summary>
	public class RS_RILayanan : DBInteractionBase
	{
		#region Class Member Declarations
            private SqlInt64        _tempatInapId, _rawatInapId, _rawatInapIdOld, _rILayananId;
			private SqlDateTime		_tanggalTransaksi, _createdDate, _modifiedDate, _tanggalBayar;
			private SqlDouble		_biayaTambahan, _discount, _jumlahSatuan;
            private SqlInt32        _jenisLayananId, _kelompokLayananId, _kelompokLayananIdOld, _layananId, _layananIdOld, _statusBayar, _modifiedBy, _createdBy;
			private SqlMoney		_jumlahTagihan, _tarif, _piutang, _bayar;
			private SqlString		_namaLayanan, _keterangan;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public RS_RILayanan()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		///		 <LI>LayananId. May be SqlInt32.Null</LI>
		///		 <LI>NamaLayanan. May be SqlString.Null</LI>
		///		 <LI>Tarif. May be SqlMoney.Null</LI>
		///		 <LI>JumlahSatuan. May be SqlDouble.Null</LI>
		///		 <LI>Discount. May be SqlDouble.Null</LI>
		///		 <LI>BiayaTambahan. May be SqlDouble.Null</LI>
		///		 <LI>JumlahTagihan. May be SqlMoney.Null</LI>
		///		 <LI>Piutang. May be SqlMoney.Null</LI>
		///		 <LI>Bayar. May be SqlMoney.Null</LI>
		///		 <LI>StatusBayar</LI>
		///		 <LI>TanggalBayar. May be SqlDateTime.Null</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>RILayananId</LI>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalTransaksi", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalTransaksi));
                cmdToExecute.Parameters.Add(new SqlParameter("@TempatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _tempatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@JenisLayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _jenisLayananId));
                cmdToExecute.Parameters.Add(new SqlParameter("@KelompokLayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kelompokLayananId));
                cmdToExecute.Parameters.Add(new SqlParameter("@LayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _layananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@NamaLayanan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _namaLayanan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Tarif", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _tarif));
				cmdToExecute.Parameters.Add(new SqlParameter("@JumlahSatuan", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _jumlahSatuan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@BiayaTambahan", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _biayaTambahan));
				cmdToExecute.Parameters.Add(new SqlParameter("@JumlahTagihan", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _jumlahTagihan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Piutang", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _piutang));
				cmdToExecute.Parameters.Add(new SqlParameter("@Bayar", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _bayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@StatusBayar", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _statusBayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBayar", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@RILayananId", SqlDbType.BigInt, 8, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _rILayananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_rILayananId = (SqlInt64)cmdToExecute.Parameters["@RILayananId"].Value;
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RILayananId</LI>
		///		 <LI>RawatInapId</LI>
		///		 <LI>LayananId. May be SqlInt32.Null</LI>
		///		 <LI>NamaLayanan. May be SqlString.Null</LI>
		///		 <LI>Tarif. May be SqlMoney.Null</LI>
		///		 <LI>JumlahSatuan. May be SqlDouble.Null</LI>
		///		 <LI>Discount. May be SqlDouble.Null</LI>
		///		 <LI>BiayaTambahan. May be SqlDouble.Null</LI>
		///		 <LI>JumlahTagihan. May be SqlMoney.Null</LI>
		///		 <LI>Piutang. May be SqlMoney.Null</LI>
		///		 <LI>Bayar. May be SqlMoney.Null</LI>
		///		 <LI>StatusBayar</LI>
		///		 <LI>TanggalBayar. May be SqlDateTime.Null</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RILayananId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rILayananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalTransaksi", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalTransaksi));
                cmdToExecute.Parameters.Add(new SqlParameter("@TempatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _tempatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@JenisLayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _jenisLayananId));
                cmdToExecute.Parameters.Add(new SqlParameter("@KelompokLayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kelompokLayananId));
                cmdToExecute.Parameters.Add(new SqlParameter("@LayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _layananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@NamaLayanan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _namaLayanan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Tarif", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _tarif));
				cmdToExecute.Parameters.Add(new SqlParameter("@JumlahSatuan", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _jumlahSatuan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _discount));
				cmdToExecute.Parameters.Add(new SqlParameter("@BiayaTambahan", SqlDbType.Float, 8, ParameterDirection.Input, true, 38, 0, "", DataRowVersion.Proposed, _biayaTambahan));
				cmdToExecute.Parameters.Add(new SqlParameter("@JumlahTagihan", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _jumlahTagihan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Piutang", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _piutang));
				cmdToExecute.Parameters.Add(new SqlParameter("@Bayar", SqlDbType.Money, 8, ParameterDirection.Input, true, 19, 4, "", DataRowVersion.Proposed, _bayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@StatusBayar", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _statusBayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBayar", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBayar));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'RawatInapId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'RawatInapId' in
		/// all rows which have as value for this field the value as set in property 'RawatInapIdOld' to 
		/// the value as set in property 'RawatInapId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		///		 <LI>RawatInapIdOld</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWRawatInapIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_UpdateAllWRawatInapIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapIdOld", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 8, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_UpdateAllWRawatInapIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::UpdateAllWRawatInapIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'LayananId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'LayananId' in
		/// all rows which have as value for this field the value as set in property 'LayananIdOld' to 
		/// the value as set in property 'LayananId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>LayananId. May be SqlInt32.Null</LI>
		///		 <LI>LayananIdOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWLayananIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_UpdateAllWLayananIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@LayananId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _layananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@LayananIdOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _layananIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_UpdateAllWLayananIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::UpdateAllWLayananIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RILayananId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RILayananId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rILayananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'RawatInapId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWRawatInapIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_DeleteAllWRawatInapIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 8, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_DeleteAllWRawatInapIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::DeleteAllWRawatInapIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'LayananId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>LayananId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWLayananIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_DeleteAllWLayananIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@LayananId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _layananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_DeleteAllWLayananIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::DeleteAllWLayananIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RILayananId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>RILayananId</LI>
		///		 <LI>RawatInapId</LI>
		///		 <LI>LayananId</LI>
		///		 <LI>NamaLayanan</LI>
		///		 <LI>Tarif</LI>
		///		 <LI>JumlahSatuan</LI>
		///		 <LI>Discount</LI>
		///		 <LI>BiayaTambahan</LI>
		///		 <LI>JumlahTagihan</LI>
		///		 <LI>Piutang</LI>
		///		 <LI>Bayar</LI>
		///		 <LI>StatusBayar</LI>
		///		 <LI>TanggalBayar</LI>
		///		 <LI>Keterangan</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy</LI>
		///		 <LI>ModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RILayanan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RILayananId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rILayananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_rILayananId = (Int64)toReturn.Rows[0]["RILayananId"];
					_rawatInapId = (Int64)toReturn.Rows[0]["RawatInapId"];
                    _tanggalTransaksi = toReturn.Rows[0]["TanggalTransaksi"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalTransaksi"];
                    _tempatInapId = toReturn.Rows[0]["TempatInapId"] == System.DBNull.Value ? SqlInt64.Null : (Int64)toReturn.Rows[0]["TempatInapId"];
                    _jenisLayananId = toReturn.Rows[0]["JenisLayananId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["JenisLayananId"];
                    _kelompokLayananId = toReturn.Rows[0]["KelompokLayananId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["KelompokLayananId"];
                    _layananId = toReturn.Rows[0]["LayananId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["LayananId"];
                    _namaLayanan = toReturn.Rows[0]["NamaLayanan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["NamaLayanan"];
					_tarif = toReturn.Rows[0]["Tarif"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Tarif"];
					_jumlahSatuan = toReturn.Rows[0]["JumlahSatuan"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["JumlahSatuan"];
					_discount = toReturn.Rows[0]["Discount"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["Discount"];
					_biayaTambahan = toReturn.Rows[0]["BiayaTambahan"] == System.DBNull.Value ? SqlDouble.Null : (double)toReturn.Rows[0]["BiayaTambahan"];
					_jumlahTagihan = toReturn.Rows[0]["JumlahTagihan"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["JumlahTagihan"];
					_piutang = toReturn.Rows[0]["Piutang"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Piutang"];
					_bayar = toReturn.Rows[0]["Bayar"] == System.DBNull.Value ? SqlMoney.Null : (Decimal)toReturn.Rows[0]["Bayar"];
					_statusBayar = (Int32)toReturn.Rows[0]["StatusBayar"];
					_tanggalBayar = toReturn.Rows[0]["TanggalBayar"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalBayar"];
					_keterangan = toReturn.Rows[0]["Keterangan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Keterangan"];
					_createdBy = (Int32)toReturn.Rows[0]["CreatedBy"];
					_createdDate = (DateTime)toReturn.Rows[0]["CreatedDate"];
					_modifiedBy = toReturn.Rows[0]["ModifiedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["ModifiedBy"];
					_modifiedDate = toReturn.Rows[0]["ModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["ModifiedDate"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RILayanan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'RawatInapId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWRawatInapIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_SelectAllWRawatInapIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RILayanan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_SelectAllWRawatInapIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::SelectAllWRawatInapIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}
        public DataTable SelectAllWRawatInapIdAndTempatInapId()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RILayanan_SelectAllWRawatInapIdAndTempatInapId]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RILayanan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TempatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _tempatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RILayanan_SelectAllWRawatInapIdAndTempatInapId' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RILayanan::SelectAllWRawatInapIdAndTempatInapId::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable GetDataTagihanByRawatInapId()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RILayanan_GetDataTagihanByRawatInapId]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RILayanan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RILayanan_GetDataTagihanByRawatInapId' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RILayanan::GetDataTagihanByRawatInapId::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable GetTagihanRuangRawat()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RILayanan_GetTagihanRuangRawat]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("V_RIBiayaRuangRawat");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RILayanan_GetTagihanRuangRawat' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RILayanan::GetTagihanRuangRawat::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable GetTagihanNonRuangRawat()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RILayanan_GetTagihanNonRuangRawat]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("V_RIBiayaNonRuangRawat");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RILayanan_GetTagihanNonRuangRawat' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RILayanan::GetTagihanNonRuangRawat::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'LayananId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>LayananId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWLayananIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RILayanan_SelectAllWLayananIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RILayanan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@LayananId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _layananId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RILayanan_SelectAllWLayananIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RILayanan::SelectAllWLayananIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt64 RILayananId
		{
			get
			{
				return _rILayananId;
			}
			set
			{
				SqlInt64 rJLayananIdTmp = (SqlInt64)value;
				if(rJLayananIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RILayananId", "RILayananId can't be NULL");
				}
				_rILayananId = value;
			}
		}


		public SqlInt64 RawatInapId
		{
			get
			{
				return _rawatInapId;
			}
			set
			{
				SqlInt64 rawatInapIdTmp = (SqlInt64)value;
				if(rawatInapIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RawatInapId", "RawatInapId can't be NULL");
				}
				_rawatInapId = value;
			}
		}
		public SqlInt64 RawatInapIdOld
		{
			get
			{
				return _rawatInapIdOld;
			}
			set
			{
				SqlInt64 rawatInapIdOldTmp = (SqlInt64)value;
				if(rawatInapIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RawatInapIdOld", "RawatInapIdOld can't be NULL");
				}
				_rawatInapIdOld = value;
			}
		}
        public SqlInt64 TempatInapId
        {
            get
            {
                return _tempatInapId;
            }
            set
            {
                SqlInt64 tempatInapIdTmp = (SqlInt64)value;
                if (tempatInapIdTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("TempatInapId", "TempatInapId can't be NULL");
                }
                _tempatInapId = value;
            }
        }
		
        public SqlDateTime TanggalTransaksi
        {
            get
            {
                return _tanggalTransaksi;
            }
            set
            {
                _tanggalTransaksi = value;
            }
        }
        public SqlInt32 JenisLayananId
        {
            get
            {
                return _jenisLayananId;
            }
            set
            {
                _jenisLayananId = value;
            }
        }
        
        public SqlInt32 KelompokLayananId
        {
            get
            {
                return _kelompokLayananId;
            }
            set
            {
                _kelompokLayananId = value;
            }
        }
        public SqlInt32 KelompokLayananIdOld
        {
            get
            {
                return _kelompokLayananIdOld;
            }
            set
            {
                _kelompokLayananIdOld = value;
            }
        }


		public SqlInt32 LayananId
		{
			get
			{
				return _layananId;
			}
			set
			{
				_layananId = value;
			}
		}
		public SqlInt32 LayananIdOld
		{
			get
			{
				return _layananIdOld;
			}
			set
			{
				_layananIdOld = value;
			}
		}


		public SqlString NamaLayanan
		{
			get
			{
				return _namaLayanan;
			}
			set
			{
				_namaLayanan = value;
			}
		}


		public SqlMoney Tarif
		{
			get
			{
				return _tarif;
			}
			set
			{
				_tarif = value;
			}
		}


		public SqlDouble JumlahSatuan
		{
			get
			{
				return _jumlahSatuan;
			}
			set
			{
				_jumlahSatuan = value;
			}
		}


		public SqlDouble Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}


		public SqlDouble BiayaTambahan
		{
			get
			{
				return _biayaTambahan;
			}
			set
			{
				_biayaTambahan = value;
			}
		}


		public SqlMoney JumlahTagihan
		{
			get
			{
				return _jumlahTagihan;
			}
			set
			{
				_jumlahTagihan = value;
			}
		}


		public SqlMoney Piutang
		{
			get
			{
				return _piutang;
			}
			set
			{
				_piutang = value;
			}
		}


		public SqlMoney Bayar
		{
			get
			{
				return _bayar;
			}
			set
			{
				_bayar = value;
			}
		}


		public SqlInt32 StatusBayar
		{
			get
			{
				return _statusBayar;
			}
			set
			{
				_statusBayar = value;
			}
		}


		public SqlDateTime TanggalBayar
		{
			get
			{
				return _tanggalBayar;
			}
			set
			{
				_tanggalBayar = value;
			}
		}


		public SqlString Keterangan
		{
			get
			{
				return _keterangan;
			}
			set
			{
				_keterangan = value;
			}
		}


		public SqlInt32 CreatedBy
		{
			get
			{
				return _createdBy;
			}
			set
			{
				SqlInt32 createdByTmp = (SqlInt32)value;
				if(createdByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedBy", "CreatedBy can't be NULL");
				}
				_createdBy = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				SqlDateTime createdDateTmp = (SqlDateTime)value;
				if(createdDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedDate", "CreatedDate can't be NULL");
				}
				_createdDate = value;
			}
		}


		public SqlInt32 ModifiedBy
		{
			get
			{
				return _modifiedBy;
			}
			set
			{
				_modifiedBy = value;
			}
		}


		public SqlDateTime ModifiedDate
		{
			get
			{
				return _modifiedDate;
			}
			set
			{
				_modifiedDate = value;
			}
		}
		#endregion
	}
}
