///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'RS_RawatJalan'
// Generated by LLBLGen v1.21.2003.712 Final on: Tuesday, October 16, 2007, 9:57:10 PM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace SIMRS.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'RS_RawatJalan'.
	/// </summary>
	public class RS_RawatJalan : DBInteractionBase
	{
		#region Class Member Declarations
            private SqlBoolean      _flagTerakhir;
            private SqlInt64        _asalPasienId, _registrasiId, _registrasiIdOld, _rawatJalanId;
			private SqlDateTime		_createdDate, _tanggalBerobat, _tanggalBerobatTerakhir, _modifiedDate;
            private SqlInt32        _jenisPoliklinikId, _kelompokPoliklinikId, _status, _modifiedBy, _createdBy, _dokterId, _dokterIdOld, _poliklinikId, _poliklinikIdOld, _poliklinikIdTerakhir, _poliklinikIdTerakhirOld, _umurPasien, _nomorTunggu;
            private SqlString       _keterangan, _jamPraktek;
            // Data Pasien
            private SqlInt64        _pasienId;
            private SqlDateTime     _tanggalLahir;
			private SqlInt32        _statusPerkawinanId, _kabupatenKotaId, _propinsiId, _agamaId, _pendidikanId, _kecamatanId, _statusId, _pangkatId, _kelurahanDesaId;
            private SqlString       _noAskes, _noKTP, _golDarah, _teleponKantor, _alamatKantor, _noRM, _nama, _jenisKelamin, _telepon, _alamat, _tempatLahir, _pekerjaan, _nRP, _kesatuan;
            private SqlString       _statusPerkawinanNama, _kabupatenKotaNama, _propinsiNama, _agamaNama, _pendidikanNama, _kecamatanNama, _statusNama, _pangkatNama, _kelurahanDesaNama;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public RS_RawatJalan()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatJalanId</LI>
		///		 <LI>RegistrasiId</LI>
		///		 <LI>TanggalBerobatTerakhir. May be SqlDateTime.Null</LI>
		///		 <LI>PoliklinikIdTerakhir. May be SqlInt32.Null</LI>
		///		 <LI>PoliklinikId. May be SqlInt32.Null</LI>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		///		 <LI>TanggalBerobat. May be SqlDateTime.Null</LI>
		///		 <LI>UmurPasien. May be SqlInt32.Null</LI>
		///		 <LI>NomorTunggu. May be SqlInt32.Null</LI>
		///		 <LI>Status</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RegistrasiId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _registrasiId));
                cmdToExecute.Parameters.Add(new SqlParameter("@AsalPasienId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _asalPasienId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobatTerakhir", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobatTerakhir));
				cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikIdTerakhir", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikIdTerakhir));
				cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
                cmdToExecute.Parameters.Add(new SqlParameter("@JamPraktek", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _jamPraktek));
				cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
				cmdToExecute.Parameters.Add(new SqlParameter("@UmurPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _umurPasien));
				cmdToExecute.Parameters.Add(new SqlParameter("@NomorTunggu", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nomorTunggu));
				cmdToExecute.Parameters.Add(new SqlParameter("@Status", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _status));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatJalanId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _rawatJalanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _rawatJalanId = (SqlInt64)cmdToExecute.Parameters["@RawatJalanId"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatJalanId</LI>
		///		 <LI>RegistrasiId</LI>
		///		 <LI>TanggalBerobatTerakhir. May be SqlDateTime.Null</LI>
		///		 <LI>PoliklinikIdTerakhir. May be SqlInt32.Null</LI>
		///		 <LI>PoliklinikId. May be SqlInt32.Null</LI>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		///		 <LI>TanggalBerobat. May be SqlDateTime.Null</LI>
		///		 <LI>UmurPasien. May be SqlInt32.Null</LI>
		///		 <LI>NomorTunggu. May be SqlInt32.Null</LI>
		///		 <LI>Status</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatJalanId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatJalanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@RegistrasiId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _registrasiId));
                cmdToExecute.Parameters.Add(new SqlParameter("@AsalPasienId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _asalPasienId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobatTerakhir", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobatTerakhir));
				cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikIdTerakhir", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikIdTerakhir));
				cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
                cmdToExecute.Parameters.Add(new SqlParameter("@JamPraktek", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _jamPraktek));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
				cmdToExecute.Parameters.Add(new SqlParameter("@UmurPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _umurPasien));
				cmdToExecute.Parameters.Add(new SqlParameter("@NomorTunggu", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _nomorTunggu));
				cmdToExecute.Parameters.Add(new SqlParameter("@Status", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _status));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}

		
		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatJalanId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatJalanId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatJalanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorMessage", SqlDbType.VarChar, 255, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorMessage));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorMessage = (SqlString)cmdToExecute.Parameters["@ErrorMessage"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}

        
		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatJalanId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>RawatJalanId</LI>
		///		 <LI>RegistrasiId</LI>
		///		 <LI>TanggalBerobatTerakhir</LI>
		///		 <LI>PoliklinikIdTerakhir</LI>
		///		 <LI>PoliklinikId</LI>
		///		 <LI>DokterId</LI>
		///		 <LI>TanggalBerobat</LI>
		///		 <LI>UmurPasien</LI>
		///		 <LI>NomorTunggu</LI>
		///		 <LI>Status</LI>
		///		 <LI>Keterangan</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy</LI>
		///		 <LI>ModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatJalan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatJalanId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatJalanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_rawatJalanId = (Int64)toReturn.Rows[0]["RawatJalanId"];
					_registrasiId = (Int64)toReturn.Rows[0]["RegistrasiId"];
                    _asalPasienId = toReturn.Rows[0]["AsalPasienId"] == System.DBNull.Value ? SqlInt64.Null : (Int64)toReturn.Rows[0]["AsalPasienId"];
                    _tanggalBerobatTerakhir = toReturn.Rows[0]["TanggalBerobatTerakhir"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalBerobatTerakhir"];
					_poliklinikIdTerakhir = toReturn.Rows[0]["PoliklinikIdTerakhir"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PoliklinikIdTerakhir"];
					_poliklinikId = toReturn.Rows[0]["PoliklinikId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PoliklinikId"];
					_dokterId = toReturn.Rows[0]["DokterId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["DokterId"];
                    _jamPraktek = toReturn.Rows[0]["JamPraktek"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["JamPraktek"];
                    _tanggalBerobat = toReturn.Rows[0]["TanggalBerobat"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalBerobat"];
					_umurPasien = toReturn.Rows[0]["UmurPasien"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["UmurPasien"];
					_nomorTunggu = toReturn.Rows[0]["NomorTunggu"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["NomorTunggu"];
					//_status = (Int32)toReturn.Rows[0]["StatusRawatJalan"];
                    _flagTerakhir = (bool)toReturn.Rows[0]["FlagTerakhir"];
                    _keterangan = toReturn.Rows[0]["Keterangan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Keterangan"];
					_createdBy = toReturn.Rows[0]["CreatedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedBy"];
					_createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
					_modifiedBy = toReturn.Rows[0]["ModifiedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["ModifiedBy"];
					_modifiedDate = toReturn.Rows[0]["ModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["ModifiedDate"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        
		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatJalan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'RegistrasiId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RegistrasiId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWRegistrasiIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllWRegistrasiIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatJalan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RegistrasiId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _registrasiId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 19, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllWRegistrasiIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::SelectAllWRegistrasiIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'PoliklinikId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PoliklinikId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWPoliklinikIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllWPoliklinikIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatJalan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllWPoliklinikIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::SelectAllWPoliklinikIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'DokterId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllWDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatJalan");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllWDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatJalan::SelectAllWDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

        public DataTable SelectAllFilter()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllFilter]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@JenisPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _jenisPoliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@KelompokPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kelompokPoliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllFilter' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::SelectAllFilter::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllLastRawatJalanFilter()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllLastRawatJalanFilter]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@Status", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _status));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllLastRawatJalanFilter' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::SelectAllLastRawatJalanFilter::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public string GetNomorRegistrasi()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_GetNomorRegistrasi]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRegistrasi", SqlDbType.VarChar, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, ""));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                string NoRegistrasi = (string)cmdToExecute.Parameters["@NoRegistrasi"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_GetNomorRegistrasi' reported the ErrorCode: " + _errorCode);
                }

                return NoRegistrasi;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::GetNomorRegistrasi::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public int GetNomorTunggu()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_GetNomorTunggu]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@PoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _poliklinikId));
                cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
                cmdToExecute.Parameters.Add(new SqlParameter("@JamPraktek", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _jamPraktek));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@NomorTunggu", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _nomorTunggu));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _nomorTunggu = (SqlInt32)cmdToExecute.Parameters["@NomorTunggu"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_GetNomorTunggu' reported the ErrorCode: " + _errorCode);
                }

                return (int)_nomorTunggu;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::GetNomorTunggu::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllFilterForRekamMedis()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllFilterForRekamMedis]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllFilterForRekamMedis' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::SelectAllFilterForRekamMedis::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectAllFilterForRawatInap()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_SelectAllFilterForRawatInap]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalBerobat", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalBerobat));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_SelectAllFilterForRawatInap' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::SelectAllFilterForRawatInap::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable GetListTahun()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatJalan_GetListTahun]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatJalan");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatJalan_GetListTahun' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatJalan::GetListTahun::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt64 RawatJalanId
		{
			get
			{
				return _rawatJalanId;
			}
			set
			{
				SqlInt64 rawatJalanIdTmp = (SqlInt64)value;
				if(rawatJalanIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RawatJalanId", "RawatJalanId can't be NULL");
				}
				_rawatJalanId = value;
			}
		}

		public SqlInt64 RegistrasiId
		{
			get
			{
				return _registrasiId;
			}
			set
			{
				SqlInt64 registrasiIdTmp = (SqlInt64)value;
				if(registrasiIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RegistrasiId", "RegistrasiId can't be NULL");
				}
				_registrasiId = value;
			}
		}
		public SqlInt64 RegistrasiIdOld
		{
			get
			{
				return _registrasiIdOld;
			}
			set
			{
				SqlInt64 registrasiIdOldTmp = (SqlInt64)value;
				if(registrasiIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RegistrasiIdOld", "RegistrasiIdOld can't be NULL");
				}
				_registrasiIdOld = value;
			}
		}

        public SqlInt64 AsalPasienId
        {
            get
            {
                return _asalPasienId;
            }
            set
            {
                _asalPasienId = value;
            }
        }
		

		public SqlDateTime TanggalBerobatTerakhir
		{
			get
			{
				return _tanggalBerobatTerakhir;
			}
			set
			{
				_tanggalBerobatTerakhir = value;
			}
		}


		public SqlInt32 PoliklinikIdTerakhir
		{
			get
			{
				return _poliklinikIdTerakhir;
			}
			set
			{
				_poliklinikIdTerakhir = value;
			}
		}
		public SqlInt32 PoliklinikIdTerakhirOld
		{
			get
			{
				return _poliklinikIdTerakhirOld;
			}
			set
			{
				_poliklinikIdTerakhirOld = value;
			}
		}

        public SqlInt32 JenisPoliklinikId
        {
            get
            {
                return _jenisPoliklinikId;
            }
            set
            {
                _jenisPoliklinikId = value;
            }
        }

        public SqlInt32 KelompokPoliklinikId
        {
            get
            {
                return _kelompokPoliklinikId;
            }
            set
            {
                _kelompokPoliklinikId = value;
            }
        }
		
		public SqlInt32 PoliklinikId
		{
			get
			{
				return _poliklinikId;
			}
			set
			{
				_poliklinikId = value;
			}
		}
		public SqlInt32 PoliklinikIdOld
		{
			get
			{
				return _poliklinikIdOld;
			}
			set
			{
				_poliklinikIdOld = value;
			}
		}


		public SqlInt32 DokterId
		{
			get
			{
				return _dokterId;
			}
			set
			{
				_dokterId = value;
			}
		}
		public SqlInt32 DokterIdOld
		{
			get
			{
				return _dokterIdOld;
			}
			set
			{
				_dokterIdOld = value;
			}
		}

        public SqlString JamPraktek
        {
            get
            {
                return _jamPraktek;
            }
            set
            {
                _jamPraktek = value;
            }
        }

		public SqlDateTime TanggalBerobat
		{
			get
			{
				return _tanggalBerobat;
			}
			set
			{
				_tanggalBerobat = value;
			}
		}


		public SqlInt32 UmurPasien
		{
			get
			{
				return _umurPasien;
			}
			set
			{
				_umurPasien = value;
			}
		}


		public SqlInt32 NomorTunggu
		{
			get
			{
				return _nomorTunggu;
			}
			set
			{
				_nomorTunggu = value;
			}
		}


		public SqlInt32 Status
		{
			get
			{
				return _status;
			}
			set
			{
				SqlInt32 statusTmp = (SqlInt32)value;
				if(statusTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("Status", "Status can't be NULL");
				}
				_status = value;
			}
		}

        public SqlBoolean FlagTerakhir
        {
            get
            {
                return _flagTerakhir;
            }
            set
            {
                _flagTerakhir = value;
            }
        }
		public SqlString Keterangan
		{
			get
			{
				return _keterangan;
			}
			set
			{
				_keterangan = value;
			}
		}


		public SqlInt32 CreatedBy
		{
			get
			{
				return _createdBy;
			}
			set
			{
				_createdBy = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				_createdDate = value;
			}
		}


		public SqlInt32 ModifiedBy
		{
			get
			{
				return _modifiedBy;
			}
			set
			{
				_modifiedBy = value;
			}
		}


		public SqlDateTime ModifiedDate
		{
			get
			{
				return _modifiedDate;
			}
			set
			{
				_modifiedDate = value;
			}
		}

        // Data Pasien
        public SqlInt64 PasienId
        {
            get
            {
                return _pasienId;
            }
            set
            {
                SqlInt64 pasienIdTmp = (SqlInt64)value;
                if (pasienIdTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("PasienId", "PasienId can't be NULL");
                }
                _pasienId = value;
            }
        }

        public SqlString NoRM
        {
            get
            {
                return _noRM;
            }
            set
            {
                SqlString noRMTmp = (SqlString)value;
                if (noRMTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NoRM", "NoRM can't be NULL");
                }
                _noRM = value;
            }
        }

        public SqlString Nama
        {
            get
            {
                return _nama;
            }
            set
            {
                SqlString namaTmp = (SqlString)value;
                if (namaTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Nama", "Nama can't be NULL");
                }
                _nama = value;
            }
        }

        public SqlInt32 StatusId
        {
            get
            {
                return _statusId;
            }
            set
            {
                _statusId = value;
            }
        }
        public SqlString StatusNama
        {
            get
            {
                return _statusNama;
            }
            set
            {
                _statusNama = value;
            }
        }

        public SqlInt32 PangkatId
        {
            get
            {
                return _pangkatId;
            }
            set
            {
                _pangkatId = value;
            }
        }
        public SqlString PangkatNama
        {
            get
            {
                return _pangkatNama;
            }
            set
            {
                _pangkatNama = value;
            }
        }

        public SqlString NoAskes
        {
            get
            {
                return _noAskes;
            }
            set
            {
                _noAskes = value;
            }
        }
        public SqlString NoKTP
        {
            get
            {
                return _noKTP;
            }
            set
            {
                _noKTP = value;
            }
        }
        public SqlString GolDarah
        {
            get
            {
                return _golDarah;
            }
            set
            {
                _golDarah = value;
            }
        }

        public SqlString NRP
        {
            get
            {
                return _nRP;
            }
            set
            {
                _nRP = value;
            }
        }

        public SqlString Kesatuan
        {
            get
            {
                return _kesatuan;
            }
            set
            {
                _kesatuan = value;
            }
        }

        public SqlString TempatLahir
        {
            get
            {
                return _tempatLahir;
            }
            set
            {
                _tempatLahir = value;
            }
        }

        public SqlDateTime TanggalLahir
        {
            get
            {
                return _tanggalLahir;
            }
            set
            {
                _tanggalLahir = value;
            }
        }

        public SqlString Alamat
        {
            get
            {
                return _alamat;
            }
            set
            {
                _alamat = value;
            }
        }

        public SqlInt32 KelurahanDesaId
        {
            get
            {
                return _kelurahanDesaId;
            }
            set
            {
                _kelurahanDesaId = value;
            }
        }
        public SqlString KelurahanDesaNama
        {
            get
            {
                return _kelurahanDesaNama;
            }
            set
            {
                _kelurahanDesaNama = value;
            }
        }

        public SqlInt32 KecamatanId
        {
            get
            {
                return _kecamatanId;
            }
            set
            {
                _kecamatanId = value;
            }
        }
        public SqlString KecamatanNama
        {
            get
            {
                return _kecamatanNama;
            }
            set
            {
                _kecamatanNama = value;
            }
        }
        public SqlInt32 KabupatenKotaId
        {
            get
            {
                return _kabupatenKotaId;
            }
            set
            {
                _kabupatenKotaId = value;
            }
        }
        public SqlString KabupatenKotaNama
        {
            get
            {
                return _kabupatenKotaNama;
            }
            set
            {
                _kabupatenKotaNama = value;
            }
        }
        public SqlInt32 PropinsiId
        {
            get
            {
                return _propinsiId;
            }
            set
            {
                _propinsiId = value;
            }
        }
        public SqlString PropinsiNama
        {
            get
            {
                return _propinsiNama;
            }
            set
            {
                _propinsiNama = value;
            }
        }
        public SqlString Telepon
        {
            get
            {
                return _telepon;
            }
            set
            {
                _telepon = value;
            }
        }

        public SqlString JenisKelamin
        {
            get
            {
                return _jenisKelamin;
            }
            set
            {
                _jenisKelamin = value;
            }
        }

        public SqlInt32 StatusPerkawinanId
        {
            get
            {
                return _statusPerkawinanId;
            }
            set
            {
                _statusPerkawinanId = value;
            }
        }
        public SqlString StatusPerkawinanNama
        {
            get
            {
                return _statusPerkawinanNama;
            }
            set
            {
                _statusPerkawinanNama = value;
            }
        }
        public SqlInt32 AgamaId
        {
            get
            {
                return _agamaId;
            }
            set
            {
                _agamaId = value;
            }
        }
        public SqlString AgamaNama
        {
            get
            {
                return _agamaNama;
            }
            set
            {
                _agamaNama = value;
            }
        }
        public SqlInt32 PendidikanId
        {
            get
            {
                return _pendidikanId;
            }
            set
            {
                _pendidikanId = value;
            }
        }
        public SqlString PendidikanNama
        {
            get
            {
                return _pendidikanNama;
            }
            set
            {
                _pendidikanNama = value;
            }
        }
        public SqlString Pekerjaan
        {
            get
            {
                return _pekerjaan;
            }
            set
            {
                _pekerjaan = value;
            }
        }

        public SqlString AlamatKantor
        {
            get
            {
                return _alamatKantor;
            }
            set
            {
                _alamatKantor = value;
            }
        }

        public SqlString TeleponKantor
        {
            get
            {
                return _teleponKantor;
            }
            set
            {
                _teleponKantor = value;
            }
        }
		#endregion
	}
}
