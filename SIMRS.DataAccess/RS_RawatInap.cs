///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'RS_RawatInap'
// Generated by LLBLGen v1.21.2003.712 Final on: 27 October 2007, 02:27:09
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace SIMRS.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'RS_RawatInap'.
	/// </summary>
	public class RS_RawatInap : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt64		_registrasiId, _rawatInapId;
			private SqlDateTime		_tanggalKeluar, _createdDate, _modifiedDate, _tanggalMasuk;
			private SqlInt32		_asalPasien, _createdBy, _status, _modifiedBy, _umurPasien, _hariPerawatan, _dariPoliklinikId, _dariPoliklinikIdOld, _dariDokterId, _dariDokterIdOld, _dokterId, _dokterIdOld;
            private SqlMoney        _deposit;
            private SqlString       _dariRujukan, _diagnosaKeluar, _diagnosaMasuk;
            // Data Pasien
            private SqlInt64 _pasienId;
            private SqlDateTime _tanggalLahir;
            private SqlInt32 _statusPerkawinanId, _kabupatenKotaId, _propinsiId, _agamaId, _pendidikanId, _kecamatanId, _statusId, _pangkatId, _kelurahanDesaId;
            private SqlString _noAskes, _noKTP, _golDarah, _teleponKantor, _alamatKantor, _noRM, _nama, _jenisKelamin, _telepon, _alamat, _tempatLahir, _pekerjaan, _nRP, _kesatuan;
            private SqlString _statusPerkawinanNama, _kabupatenKotaNama, _propinsiNama, _agamaNama, _pendidikanNama, _kecamatanNama, _statusNama, _pangkatNama, _kelurahanDesaNama;
		
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public RS_RawatInap()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		///		 <LI>RegistrasiId. May be SqlInt64.Null</LI>
		///		 <LI>TanggalMasuk. May be SqlDateTime.Null</LI>
		///		 <LI>UmurPasien. May be SqlInt32.Null</LI>
		///		 <LI>DariPoliklinikId. May be SqlInt32.Null</LI>
		///		 <LI>DariDokterId. May be SqlInt32.Null</LI>
		///		 <LI>DiagnosaMasuk. May be SqlString.Null</LI>
		///		 <LI>TanggalKeluar. May be SqlDateTime.Null</LI>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		///		 <LI>DiagnosaKeluar. May be SqlString.Null</LI>
		///		 <LI>HariPerawatan. May be SqlInt32.Null</LI>
		///		 <LI>Status. May be SqlInt32.Null</LI>
		///		 <LI>CreatedBy. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RegistrasiId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, _registrasiId));
				cmdToExecute.Parameters.Add(new SqlParameter("@TanggalMasuk", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalMasuk));
				cmdToExecute.Parameters.Add(new SqlParameter("@UmurPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _umurPasien));
                cmdToExecute.Parameters.Add(new SqlParameter("@AsalPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _asalPasien));
                cmdToExecute.Parameters.Add(new SqlParameter("@DariRujukan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dariRujukan));
                cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariDokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DiagnosaMasuk", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _diagnosaMasuk));
                cmdToExecute.Parameters.Add(new SqlParameter("@Deposit", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _deposit));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalKeluar", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalKeluar));
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DiagnosaKeluar", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _diagnosaKeluar));
				cmdToExecute.Parameters.Add(new SqlParameter("@HariPerawatan", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _hariPerawatan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Status", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _status));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _rawatInapId = (SqlInt64)cmdToExecute.Parameters["@RawatInapId"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		///		 <LI>RegistrasiId. May be SqlInt64.Null</LI>
		///		 <LI>TanggalMasuk. May be SqlDateTime.Null</LI>
		///		 <LI>UmurPasien. May be SqlInt32.Null</LI>
		///		 <LI>DariPoliklinikId. May be SqlInt32.Null</LI>
		///		 <LI>DariDokterId. May be SqlInt32.Null</LI>
		///		 <LI>DiagnosaMasuk. May be SqlString.Null</LI>
		///		 <LI>TanggalKeluar. May be SqlDateTime.Null</LI>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		///		 <LI>DiagnosaKeluar. May be SqlString.Null</LI>
		///		 <LI>HariPerawatan. May be SqlInt32.Null</LI>
		///		 <LI>Status. May be SqlInt32.Null</LI>
		///		 <LI>CreatedBy. May be SqlInt32.Null</LI>
		///		 <LI>CreatedDate. May be SqlDateTime.Null</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
				cmdToExecute.Parameters.Add(new SqlParameter("@RegistrasiId", SqlDbType.BigInt, 8, ParameterDirection.Input, true, 19, 0, "", DataRowVersion.Proposed, _registrasiId));
				cmdToExecute.Parameters.Add(new SqlParameter("@TanggalMasuk", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalMasuk));
				cmdToExecute.Parameters.Add(new SqlParameter("@UmurPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _umurPasien));
                cmdToExecute.Parameters.Add(new SqlParameter("@AsalPasien", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _asalPasien));
                cmdToExecute.Parameters.Add(new SqlParameter("@DariRujukan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _dariRujukan));
                cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariDokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DiagnosaMasuk", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _diagnosaMasuk));
                cmdToExecute.Parameters.Add(new SqlParameter("@Deposit", SqlDbType.Money, 8, ParameterDirection.Input, false, 19, 4, "", DataRowVersion.Proposed, _deposit));
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalKeluar", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalKeluar));
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DiagnosaKeluar", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _diagnosaKeluar));
				cmdToExecute.Parameters.Add(new SqlParameter("@HariPerawatan", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _hariPerawatan));
				cmdToExecute.Parameters.Add(new SqlParameter("@Status", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _status));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'DariPoliklinikId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'DariPoliklinikId' in
		/// all rows which have as value for this field the value as set in property 'DariPoliklinikIdOld' to 
		/// the value as set in property 'DariPoliklinikId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariPoliklinikId. May be SqlInt32.Null</LI>
		///		 <LI>DariPoliklinikIdOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWDariPoliklinikIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_UpdateAllWDariPoliklinikIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikIdOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_UpdateAllWDariPoliklinikIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::UpdateAllWDariPoliklinikIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'DariDokterId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'DariDokterId' in
		/// all rows which have as value for this field the value as set in property 'DariDokterIdOld' to 
		/// the value as set in property 'DariDokterId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariDokterId. May be SqlInt32.Null</LI>
		///		 <LI>DariDokterIdOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWDariDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_UpdateAllWDariDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dariDokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterIdOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariDokterIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_UpdateAllWDariDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::UpdateAllWDariDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method for updating one or more rows using the Foreign Key 'DokterId.
		/// This method will Update one or more existing rows in the database. It will reset the field 'DokterId' in
		/// all rows which have as value for this field the value as set in property 'DokterIdOld' to 
		/// the value as set in property 'DokterId'.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		///		 <LI>DokterIdOld. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool UpdateAllWDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_UpdateAllWDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterIdOld", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterIdOld));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_UpdateAllWDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::UpdateAllWDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorMessage", SqlDbType.VarChar, 255, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Proposed, _errorMessage));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _errorMessage = (SqlString)cmdToExecute.Parameters["@ErrorMessage"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'DariPoliklinikId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariPoliklinikId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWDariPoliklinikIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_DeleteAllWDariPoliklinikIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_DeleteAllWDariPoliklinikIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::DeleteAllWDariPoliklinikIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'DariDokterId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariDokterId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWDariDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_DeleteAllWDariDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dariDokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_DeleteAllWDariDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::DeleteAllWDariDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'DokterId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_DeleteAllWDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_DeleteAllWDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::DeleteAllWDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>RawatInapId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>RawatInapId</LI>
		///		 <LI>RegistrasiId</LI>
		///		 <LI>TanggalMasuk</LI>
		///		 <LI>UmurPasien</LI>
		///		 <LI>DariPoliklinikId</LI>
		///		 <LI>DariDokterId</LI>
		///		 <LI>DiagnosaMasuk</LI>
		///		 <LI>TanggalKeluar</LI>
		///		 <LI>DokterId</LI>
		///		 <LI>DiagnosaKeluar</LI>
		///		 <LI>HariPerawatan</LI>
		///		 <LI>Status</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy</LI>
		///		 <LI>ModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatInap");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@RawatInapId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _rawatInapId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_rawatInapId = (Int64)toReturn.Rows[0]["RawatInapId"];
					_registrasiId = toReturn.Rows[0]["RegistrasiId"] == System.DBNull.Value ? SqlInt64.Null : (Int64)toReturn.Rows[0]["RegistrasiId"];
					_tanggalMasuk = toReturn.Rows[0]["TanggalMasuk"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalMasuk"];
					_umurPasien = toReturn.Rows[0]["UmurPasien"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["UmurPasien"];
                    _asalPasien = toReturn.Rows[0]["AsalPasien"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["AsalPasien"];
                    _dariRujukan = toReturn.Rows[0]["DariRujukan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["DariRujukan"];
                    _dariPoliklinikId = toReturn.Rows[0]["DariPoliklinikId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["DariPoliklinikId"];
					_dariDokterId = toReturn.Rows[0]["DariDokterId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["DariDokterId"];
					_diagnosaMasuk = toReturn.Rows[0]["DiagnosaMasuk"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["DiagnosaMasuk"];
                    _deposit = (Decimal)toReturn.Rows[0]["Deposit"];
                    _tanggalKeluar = toReturn.Rows[0]["TanggalKeluar"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["TanggalKeluar"];
					_dokterId = toReturn.Rows[0]["DokterId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["DokterId"];
					_diagnosaKeluar = toReturn.Rows[0]["DiagnosaKeluar"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["DiagnosaKeluar"];
					_hariPerawatan = toReturn.Rows[0]["HariPerawatan"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["HariPerawatan"];
                    _status = toReturn.Rows[0]["StatusRawatInap"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["StatusRawatInap"];
					_createdBy = toReturn.Rows[0]["CreatedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["CreatedBy"];
					_createdDate = toReturn.Rows[0]["CreatedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["CreatedDate"];
					_modifiedBy = toReturn.Rows[0]["ModifiedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["ModifiedBy"];
					_modifiedDate = toReturn.Rows[0]["ModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["ModifiedDate"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatInap");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'DariPoliklinikId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariPoliklinikId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWDariPoliklinikIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllWDariPoliklinikIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatInap");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariPoliklinikId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariPoliklinikId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllWDariPoliklinikIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::SelectAllWDariPoliklinikIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'DariDokterId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DariDokterId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWDariDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllWDariDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatInap");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DariDokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dariDokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllWDariDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::SelectAllWDariDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'DokterId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>DokterId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWDokterIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllWDokterIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_RawatInap");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@DokterId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _dokterId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllWDokterIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_RawatInap::SelectAllWDokterIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


        public string GetNomorRegistrasi()
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatInap_GetNomorRegistrasi]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatInap");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@TanggalMasuk", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _tanggalMasuk));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRegistrasi", SqlDbType.VarChar, 50, ParameterDirection.Output, true, 0, 0, "", DataRowVersion.Proposed, ""));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                _rowsAffected = cmdToExecute.ExecuteNonQuery();
                string NoRegistrasi = (string)cmdToExecute.Parameters["@NoRegistrasi"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatInap_GetNomorRegistrasi' reported the ErrorCode: " + _errorCode);
                }

                return NoRegistrasi;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatInap::GetNomorRegistrasi::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllFilter(int KelasId, int RuangId, string NomorRuang)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllFilter]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatInap");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@KelasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, KelasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@RuangId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, RuangId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NomorRuang", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, NomorRuang));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllFilter' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatInap::SelectAllFilter::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllForRekamMedis(int KelasId, int RuangId, string NomorRuang)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllForRekamMedis]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatInap");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@KelasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, KelasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@RuangId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, RuangId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NomorRuang", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, NomorRuang));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllForRekamMedis' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatInap::SelectAllForRekamMedis::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }
        public DataTable SelectAllForKasir(int KelasId, int RuangId, string NomorRuang)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllForKasir]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatInap");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@KelasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, KelasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@RuangId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, RuangId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NomorRuang", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, NomorRuang));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllForKasir' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatInap::SelectAllForKasir::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

        public DataTable SelectAllFilterLast(int KelasId, int RuangId, string NomorRuang)
        {
            SqlCommand cmdToExecute = new SqlCommand();
            cmdToExecute.CommandText = "dbo.[RS_RawatInap_SelectAllFilterLast]";
            cmdToExecute.CommandType = CommandType.StoredProcedure;
            DataTable toReturn = new DataTable("RS_RawatInap");
            SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

            // Use base class' connection object
            cmdToExecute.Connection = _mainConnection;

            try
            {
                cmdToExecute.Parameters.Add(new SqlParameter("@KelasId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, KelasId));
                cmdToExecute.Parameters.Add(new SqlParameter("@RuangId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, RuangId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NomorRuang", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, NomorRuang));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoRM", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _noRM));
                cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nama));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

                // Open connection.
                _mainConnection.Open();

                // Execute query.
                adapter.Fill(toReturn);
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

                if (_errorCode != (int)LLBLError.AllOk)
                {
                    // Throw error.
                    throw new Exception("Stored Procedure 'RS_RawatInap_SelectAllFilterLast' reported the ErrorCode: " + _errorCode);
                }

                return toReturn;
            }
            catch (Exception ex)
            {
                // some error occured. Bubble it to caller and encapsulate Exception object
                throw new Exception("RS_RawatInap::SelectAllFilterLast::Error occured.", ex);
            }
            finally
            {
                // Close connection.
                _mainConnection.Close();
                cmdToExecute.Dispose();
                adapter.Dispose();
            }
        }

		#region Class Property Declarations
		public SqlInt64 RawatInapId
		{
			get
			{
				return _rawatInapId;
			}
			set
			{
				SqlInt64 rawatInapIdTmp = (SqlInt64)value;
				if(rawatInapIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RawatInapId", "RawatInapId can't be NULL");
				}
				_rawatInapId = value;
			}
		}


		public SqlInt64 RegistrasiId
		{
			get
			{
				return _registrasiId;
			}
			set
			{
				_registrasiId = value;
			}
		}


		public SqlDateTime TanggalMasuk
		{
			get
			{
				return _tanggalMasuk;
			}
			set
			{
				_tanggalMasuk = value;
			}
		}


		public SqlInt32 UmurPasien
		{
			get
			{
				return _umurPasien;
			}
			set
			{
				_umurPasien = value;
			}
		}

        public SqlInt32 AsalPasien
        {
            get
            {
                return _asalPasien;
            }
            set
            {
                _asalPasien = value;
            }
        }
        public SqlString DariRujukan
        {
            get
            {
                return _dariRujukan;
            }
            set
            {
                _dariRujukan = value;
            }
        }


		public SqlInt32 DariPoliklinikId
		{
			get
			{
				return _dariPoliklinikId;
			}
			set
			{
				_dariPoliklinikId = value;
			}
		}
		public SqlInt32 DariPoliklinikIdOld
		{
			get
			{
				return _dariPoliklinikIdOld;
			}
			set
			{
				_dariPoliklinikIdOld = value;
			}
		}


		public SqlInt32 DariDokterId
		{
			get
			{
				return _dariDokterId;
			}
			set
			{
				_dariDokterId = value;
			}
		}
		public SqlInt32 DariDokterIdOld
		{
			get
			{
				return _dariDokterIdOld;
			}
			set
			{
				_dariDokterIdOld = value;
			}
		}


		public SqlString DiagnosaMasuk
		{
			get
			{
				return _diagnosaMasuk;
			}
			set
			{
				_diagnosaMasuk = value;
			}
		}

        public SqlMoney Deposit
        {
            get
            {
                return _deposit;
            }
            set
            {
                SqlMoney depositTmp = (SqlMoney)value;
                if (depositTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Deposit", "Deposit can't be NULL");
                }
                _deposit = value;
            }
        }

		public SqlDateTime TanggalKeluar
		{
			get
			{
				return _tanggalKeluar;
			}
			set
			{
				_tanggalKeluar = value;
			}
		}


		public SqlInt32 DokterId
		{
			get
			{
				return _dokterId;
			}
			set
			{
				_dokterId = value;
			}
		}
		public SqlInt32 DokterIdOld
		{
			get
			{
				return _dokterIdOld;
			}
			set
			{
				_dokterIdOld = value;
			}
		}


		public SqlString DiagnosaKeluar
		{
			get
			{
				return _diagnosaKeluar;
			}
			set
			{
				_diagnosaKeluar = value;
			}
		}


		public SqlInt32 HariPerawatan
		{
			get
			{
				return _hariPerawatan;
			}
			set
			{
				_hariPerawatan = value;
			}
		}


		public SqlInt32 Status
		{
			get
			{
				return _status;
			}
			set
			{
				_status = value;
			}
		}


		public SqlInt32 CreatedBy
		{
			get
			{
				return _createdBy;
			}
			set
			{
				_createdBy = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				_createdDate = value;
			}
		}


		public SqlInt32 ModifiedBy
		{
			get
			{
				return _modifiedBy;
			}
			set
			{
				_modifiedBy = value;
			}
		}


		public SqlDateTime ModifiedDate
		{
			get
			{
				return _modifiedDate;
			}
			set
			{
				_modifiedDate = value;
			}
		}

        // Data Pasien
        public SqlInt64 PasienId
        {
            get
            {
                return _pasienId;
            }
            set
            {
                SqlInt64 pasienIdTmp = (SqlInt64)value;
                if (pasienIdTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("PasienId", "PasienId can't be NULL");
                }
                _pasienId = value;
            }
        }

        public SqlString NoRM
        {
            get
            {
                return _noRM;
            }
            set
            {
                SqlString noRMTmp = (SqlString)value;
                if (noRMTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("NoRM", "NoRM can't be NULL");
                }
                _noRM = value;
            }
        }

        public SqlString Nama
        {
            get
            {
                return _nama;
            }
            set
            {
                SqlString namaTmp = (SqlString)value;
                if (namaTmp.IsNull)
                {
                    throw new ArgumentOutOfRangeException("Nama", "Nama can't be NULL");
                }
                _nama = value;
            }
        }

        public SqlInt32 StatusId
        {
            get
            {
                return _statusId;
            }
            set
            {
                _statusId = value;
            }
        }
        public SqlString StatusNama
        {
            get
            {
                return _statusNama;
            }
            set
            {
                _statusNama = value;
            }
        }

        public SqlInt32 PangkatId
        {
            get
            {
                return _pangkatId;
            }
            set
            {
                _pangkatId = value;
            }
        }
        public SqlString PangkatNama
        {
            get
            {
                return _pangkatNama;
            }
            set
            {
                _pangkatNama = value;
            }
        }

        public SqlString NoAskes
        {
            get
            {
                return _noAskes;
            }
            set
            {
                _noAskes = value;
            }
        }
        public SqlString NoKTP
        {
            get
            {
                return _noKTP;
            }
            set
            {
                _noKTP = value;
            }
        }
        public SqlString GolDarah
        {
            get
            {
                return _golDarah;
            }
            set
            {
                _golDarah = value;
            }
        }

        public SqlString NRP
        {
            get
            {
                return _nRP;
            }
            set
            {
                _nRP = value;
            }
        }

        public SqlString Kesatuan
        {
            get
            {
                return _kesatuan;
            }
            set
            {
                _kesatuan = value;
            }
        }

        public SqlString TempatLahir
        {
            get
            {
                return _tempatLahir;
            }
            set
            {
                _tempatLahir = value;
            }
        }

        public SqlDateTime TanggalLahir
        {
            get
            {
                return _tanggalLahir;
            }
            set
            {
                _tanggalLahir = value;
            }
        }

        public SqlString Alamat
        {
            get
            {
                return _alamat;
            }
            set
            {
                _alamat = value;
            }
        }

        public SqlInt32 KelurahanDesaId
        {
            get
            {
                return _kelurahanDesaId;
            }
            set
            {
                _kelurahanDesaId = value;
            }
        }
        public SqlString KelurahanDesaNama
        {
            get
            {
                return _kelurahanDesaNama;
            }
            set
            {
                _kelurahanDesaNama = value;
            }
        }

        public SqlInt32 KecamatanId
        {
            get
            {
                return _kecamatanId;
            }
            set
            {
                _kecamatanId = value;
            }
        }
        public SqlString KecamatanNama
        {
            get
            {
                return _kecamatanNama;
            }
            set
            {
                _kecamatanNama = value;
            }
        }
        public SqlInt32 KabupatenKotaId
        {
            get
            {
                return _kabupatenKotaId;
            }
            set
            {
                _kabupatenKotaId = value;
            }
        }
        public SqlString KabupatenKotaNama
        {
            get
            {
                return _kabupatenKotaNama;
            }
            set
            {
                _kabupatenKotaNama = value;
            }
        }
        public SqlInt32 PropinsiId
        {
            get
            {
                return _propinsiId;
            }
            set
            {
                _propinsiId = value;
            }
        }
        public SqlString PropinsiNama
        {
            get
            {
                return _propinsiNama;
            }
            set
            {
                _propinsiNama = value;
            }
        }
        public SqlString Telepon
        {
            get
            {
                return _telepon;
            }
            set
            {
                _telepon = value;
            }
        }

        public SqlString JenisKelamin
        {
            get
            {
                return _jenisKelamin;
            }
            set
            {
                _jenisKelamin = value;
            }
        }

        public SqlInt32 StatusPerkawinanId
        {
            get
            {
                return _statusPerkawinanId;
            }
            set
            {
                _statusPerkawinanId = value;
            }
        }
        public SqlString StatusPerkawinanNama
        {
            get
            {
                return _statusPerkawinanNama;
            }
            set
            {
                _statusPerkawinanNama = value;
            }
        }
        public SqlInt32 AgamaId
        {
            get
            {
                return _agamaId;
            }
            set
            {
                _agamaId = value;
            }
        }
        public SqlString AgamaNama
        {
            get
            {
                return _agamaNama;
            }
            set
            {
                _agamaNama = value;
            }
        }
        public SqlInt32 PendidikanId
        {
            get
            {
                return _pendidikanId;
            }
            set
            {
                _pendidikanId = value;
            }
        }
        public SqlString PendidikanNama
        {
            get
            {
                return _pendidikanNama;
            }
            set
            {
                _pendidikanNama = value;
            }
        }
        public SqlString Pekerjaan
        {
            get
            {
                return _pekerjaan;
            }
            set
            {
                _pekerjaan = value;
            }
        }

        public SqlString AlamatKantor
        {
            get
            {
                return _alamatKantor;
            }
            set
            {
                _alamatKantor = value;
            }
        }

        public SqlString TeleponKantor
        {
            get
            {
                return _teleponKantor;
            }
            set
            {
                _teleponKantor = value;
            }
        }
		#endregion
	}
}
