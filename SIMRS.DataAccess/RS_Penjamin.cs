///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'RS_Penjamin'
// Generated by LLBLGen v1.21.2003.712 Final on: Sunday, October 14, 2007, 10:48:29 AM
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace SIMRS.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'RS_Penjamin'.
	/// </summary>
	public class RS_Penjamin : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt64		_penjaminId;
			private SqlDateTime		_createdDate, _modifiedDate;
			private SqlInt32		_agamaId, _pendidikanId, _kabupatenKotaId, _kabupatenKotaIdOld, _kecamatanId, _kecamatanIdOld, _kelurahanDesaId, _kelurahanDesaIdOld, _modifiedBy, _createdBy, _propinsiId, _propinsiIdOld, _statusId, _statusIdOld, _pangkatId, _pangkatIdOld, _hubunganId, _hubunganIdOld;
            private SqlString       _umur, _noKTP, _golDarah, _keterangan, _nama, _namaKontak, _jabatan, _kesatuan, _alamatKesatuan, _alamat, _nRP, _fax, _telepon;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public RS_Penjamin()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PenjaminId</LI>
		///		 <LI>HubunganId. May be SqlInt32.Null</LI>
		///		 <LI>Nama. May be SqlString.Null</LI>
		///		 <LI>NamaKontak. May be SqlString.Null</LI>
		///		 <LI>StatusId. May be SqlInt32.Null</LI>
		///		 <LI>PangkatId. May be SqlInt32.Null</LI>
        ///		 <LI>NoKTP. May be SqlString.Null</LI>
        ///		 <LI>GolDarah. May be SqlString.Null</LI>
        ///		 <LI>NRP. May be SqlString.Null</LI>
        ///		 <LI>Jabatan. May be SqlString.Null</LI>
        ///		 <LI>Kesatuan. May be SqlString.Null</LI>
        ///		 <LI>AlamatKesatuan. May be SqlString.Null</LI>
        ///		 <LI>Alamat. May be SqlString.Null</LI>
		///		 <LI>KelurahanDesaId. May be SqlInt32.Null</LI>
		///		 <LI>KecamatanId. May be SqlInt32.Null</LI>
		///		 <LI>KabupatenKotaId. May be SqlInt32.Null</LI>
		///		 <LI>PropinsiId. May be SqlInt32.Null</LI>
		///		 <LI>Telepon. May be SqlString.Null</LI>
		///		 <LI>Fax. May be SqlString.Null</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@HubunganId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _hubunganId));
				cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nama));
				cmdToExecute.Parameters.Add(new SqlParameter("@NamaKontak", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _namaKontak));
                cmdToExecute.Parameters.Add(new SqlParameter("@Umur", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _umur));
                cmdToExecute.Parameters.Add(new SqlParameter("@AgamaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _agamaId));
                cmdToExecute.Parameters.Add(new SqlParameter("@PendidikanId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _pendidikanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@StatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _statusId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PangkatId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _pangkatId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoKTP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _noKTP));
                cmdToExecute.Parameters.Add(new SqlParameter("@GolDarah", SqlDbType.VarChar, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _golDarah));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@Jabatan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _jabatan));
                cmdToExecute.Parameters.Add(new SqlParameter("@Kesatuan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _kesatuan));
                cmdToExecute.Parameters.Add(new SqlParameter("@AlamatKesatuan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _alamatKesatuan));
                cmdToExecute.Parameters.Add(new SqlParameter("@Alamat", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _alamat));
				cmdToExecute.Parameters.Add(new SqlParameter("@KelurahanDesaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kelurahanDesaId));
				cmdToExecute.Parameters.Add(new SqlParameter("@KecamatanId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kecamatanId));
				cmdToExecute.Parameters.Add(new SqlParameter("@KabupatenKotaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kabupatenKotaId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PropinsiId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _propinsiId));
				cmdToExecute.Parameters.Add(new SqlParameter("@Telepon", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _telepon));
				cmdToExecute.Parameters.Add(new SqlParameter("@Fax", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _fax));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
                cmdToExecute.Parameters.Add(new SqlParameter("@PenjaminId", SqlDbType.BigInt, 8, ParameterDirection.Output, false, 19, 0, "", DataRowVersion.Proposed, _penjaminId));
                cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
                _penjaminId = (SqlInt64)cmdToExecute.Parameters["@PenjaminId"].Value;
                _errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PenjaminId</LI>
		///		 <LI>HubunganId. May be SqlInt32.Null</LI>
		///		 <LI>Nama. May be SqlString.Null</LI>
		///		 <LI>NamaKontak. May be SqlString.Null</LI>
		///		 <LI>StatusId. May be SqlInt32.Null</LI>
		///		 <LI>PangkatId. May be SqlInt32.Null</LI>
        ///		 <LI>NoKTP. May be SqlString.Null</LI>
        ///		 <LI>GolDarah. May be SqlString.Null</LI>
        ///		 <LI>NRP. May be SqlString.Null</LI>
        ///		 <LI>Jabatan. May be SqlString.Null</LI>
        ///		 <LI>Kesatuan. May be SqlString.Null</LI>
        ///		 <LI>AlamatKesatuan. May be SqlString.Null</LI>
        ///		 <LI>Alamat. May be SqlString.Null</LI>
		///		 <LI>KelurahanDesaId. May be SqlInt32.Null</LI>
		///		 <LI>KecamatanId. May be SqlInt32.Null</LI>
		///		 <LI>KabupatenKotaId. May be SqlInt32.Null</LI>
		///		 <LI>PropinsiId. May be SqlInt32.Null</LI>
		///		 <LI>Telepon. May be SqlString.Null</LI>
		///		 <LI>Fax. May be SqlString.Null</LI>
		///		 <LI>Keterangan. May be SqlString.Null</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy. May be SqlInt32.Null</LI>
		///		 <LI>ModifiedDate. May be SqlDateTime.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@PenjaminId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _penjaminId));
				cmdToExecute.Parameters.Add(new SqlParameter("@HubunganId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _hubunganId));
				cmdToExecute.Parameters.Add(new SqlParameter("@Nama", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nama));
				cmdToExecute.Parameters.Add(new SqlParameter("@NamaKontak", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _namaKontak));
                cmdToExecute.Parameters.Add(new SqlParameter("@Umur", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _umur));
                cmdToExecute.Parameters.Add(new SqlParameter("@AgamaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _agamaId));
                cmdToExecute.Parameters.Add(new SqlParameter("@PendidikanId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _pendidikanId));
                cmdToExecute.Parameters.Add(new SqlParameter("@StatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _statusId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PangkatId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _pangkatId));
                cmdToExecute.Parameters.Add(new SqlParameter("@NoKTP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _noKTP));
                cmdToExecute.Parameters.Add(new SqlParameter("@GolDarah", SqlDbType.VarChar, 2, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _golDarah));
                cmdToExecute.Parameters.Add(new SqlParameter("@NRP", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _nRP));
                cmdToExecute.Parameters.Add(new SqlParameter("@Jabatan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _jabatan));
                cmdToExecute.Parameters.Add(new SqlParameter("@Kesatuan", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _kesatuan));
                cmdToExecute.Parameters.Add(new SqlParameter("@AlamatKesatuan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _alamatKesatuan));
                cmdToExecute.Parameters.Add(new SqlParameter("@Alamat", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _alamat));
				cmdToExecute.Parameters.Add(new SqlParameter("@KelurahanDesaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kelurahanDesaId));
				cmdToExecute.Parameters.Add(new SqlParameter("@KecamatanId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kecamatanId));
				cmdToExecute.Parameters.Add(new SqlParameter("@KabupatenKotaId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _kabupatenKotaId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PropinsiId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _propinsiId));
				cmdToExecute.Parameters.Add(new SqlParameter("@Telepon", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _telepon));
				cmdToExecute.Parameters.Add(new SqlParameter("@Fax", SqlDbType.VarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _fax));
				cmdToExecute.Parameters.Add(new SqlParameter("@Keterangan", SqlDbType.VarChar, 255, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _keterangan));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedBy", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@CreatedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _createdDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedBy", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _modifiedBy));
				cmdToExecute.Parameters.Add(new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, _modifiedDate));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PenjaminId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@PenjaminId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _penjaminId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PenjaminId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>PenjaminId</LI>
		///		 <LI>HubunganId</LI>
		///		 <LI>Nama</LI>
		///		 <LI>NamaKontak</LI>
		///		 <LI>StatusId</LI>
		///		 <LI>PangkatId</LI>
		///		 <LI>NRP</LI>
		///		 <LI>Kesatuan</LI>
		///		 <LI>Alamat</LI>
		///		 <LI>KelurahanDesaId</LI>
		///		 <LI>KecamatanId</LI>
		///		 <LI>KabupatenKotaId</LI>
		///		 <LI>PropinsiId</LI>
		///		 <LI>Telepon</LI>
		///		 <LI>Fax</LI>
		///		 <LI>Keterangan</LI>
		///		 <LI>CreatedBy</LI>
		///		 <LI>CreatedDate</LI>
		///		 <LI>ModifiedBy</LI>
		///		 <LI>ModifiedDate</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_Penjamin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@PenjaminId", SqlDbType.BigInt, 8, ParameterDirection.Input, false, 19, 0, "", DataRowVersion.Proposed, _penjaminId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_penjaminId = (Int64)toReturn.Rows[0]["PenjaminId"];
					_hubunganId = toReturn.Rows[0]["HubunganId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["HubunganId"];
					_nama = toReturn.Rows[0]["Nama"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Nama"];
					_namaKontak = toReturn.Rows[0]["NamaKontak"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["NamaKontak"];
                    _umur = toReturn.Rows[0]["Umur"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Umur"];
                    _agamaId = toReturn.Rows[0]["AgamaId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["AgamaId"];
                    _pendidikanId = toReturn.Rows[0]["PendidikanId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PendidikanId"];
                    _statusId = toReturn.Rows[0]["StatusId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["StatusId"];
					_pangkatId = toReturn.Rows[0]["PangkatId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PangkatId"];
					_nRP = toReturn.Rows[0]["NRP"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["NRP"];
                    _jabatan = toReturn.Rows[0]["Jabatan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Jabatan"];
                    _kesatuan = toReturn.Rows[0]["Kesatuan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Kesatuan"];
                    _alamatKesatuan = toReturn.Rows[0]["AlamatKesatuan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["AlamatKesatuan"];
                    _alamat = toReturn.Rows[0]["Alamat"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Alamat"];
					_kelurahanDesaId = toReturn.Rows[0]["KelurahanDesaId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["KelurahanDesaId"];
					_kecamatanId = toReturn.Rows[0]["KecamatanId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["KecamatanId"];
					_kabupatenKotaId = toReturn.Rows[0]["KabupatenKotaId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["KabupatenKotaId"];
					_propinsiId = toReturn.Rows[0]["PropinsiId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PropinsiId"];
					_telepon = toReturn.Rows[0]["Telepon"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Telepon"];
					_fax = toReturn.Rows[0]["Fax"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Fax"];
					_keterangan = toReturn.Rows[0]["Keterangan"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["Keterangan"];
					_createdBy = (Int32)toReturn.Rows[0]["CreatedBy"];
					_createdDate = (DateTime)toReturn.Rows[0]["CreatedDate"];
					_modifiedBy = toReturn.Rows[0]["ModifiedBy"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["ModifiedBy"];
					_modifiedDate = toReturn.Rows[0]["ModifiedDate"] == System.DBNull.Value ? SqlDateTime.Null : (DateTime)toReturn.Rows[0]["ModifiedDate"];

                    _noKTP = toReturn.Rows[0]["NoKTP"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["NoKTP"];
                    _golDarah = toReturn.Rows[0]["GolDarah"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["GolDarah"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_Penjamin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'HubunganId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>HubunganId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWHubunganIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_SelectAllWHubunganIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_Penjamin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@HubunganId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _hubunganId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_SelectAllWHubunganIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::SelectAllWHubunganIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'StatusId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>StatusId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWStatusIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_SelectAllWStatusIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_Penjamin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@StatusId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _statusId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_SelectAllWStatusIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::SelectAllWStatusIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'PangkatId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>PangkatId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWPangkatIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[RS_Penjamin_SelectAllWPangkatIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("RS_Penjamin");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@PangkatId", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, _pangkatId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'RS_Penjamin_SelectAllWPangkatIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("RS_Penjamin::SelectAllWPangkatIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		#region Class Property Declarations
		public SqlInt64 PenjaminId
		{
			get
			{
				return _penjaminId;
			}
			set
			{
				SqlInt64 penjaminIdTmp = (SqlInt64)value;
				if(penjaminIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PenjaminId", "PenjaminId can't be NULL");
				}
				_penjaminId = value;
			}
		}


		public SqlInt32 HubunganId
		{
			get
			{
				return _hubunganId;
			}
			set
			{
				_hubunganId = value;
			}
		}
		public SqlInt32 HubunganIdOld
		{
			get
			{
				return _hubunganIdOld;
			}
			set
			{
				_hubunganIdOld = value;
			}
		}


		public SqlString Nama
		{
			get
			{
				return _nama;
			}
			set
			{
				_nama = value;
			}
		}


		public SqlString NamaKontak
		{
			get
			{
				return _namaKontak;
			}
			set
			{
				_namaKontak = value;
			}
		}

        public SqlString Umur
        {
            get
            {
                return _umur;
            }
            set
            { 
                _umur = value;
            }
        }
        public SqlInt32 AgamaId
        {
            get
            {
                return _agamaId;
            }
            set
            {
                _agamaId = value;
            }
        }

        public SqlInt32 PendidikanId
        {
            get
            {
                return _pendidikanId;
            }
            set
            {
                _pendidikanId = value;
            }
        }
		
		public SqlInt32 StatusId
		{
			get
			{
				return _statusId;
			}
			set
			{
				_statusId = value;
			}
		}
		public SqlInt32 StatusIdOld
		{
			get
			{
				return _statusIdOld;
			}
			set
			{
				_statusIdOld = value;
			}
		}


		public SqlInt32 PangkatId
		{
			get
			{
				return _pangkatId;
			}
			set
			{
				_pangkatId = value;
			}
		}
		public SqlInt32 PangkatIdOld
		{
			get
			{
				return _pangkatIdOld;
			}
			set
			{
				_pangkatIdOld = value;
			}
		}

        public SqlString NoKTP
        {
            get
            {
                return _noKTP;
            }
            set
            {
                _noKTP = value;
            }
        }
        public SqlString GolDarah
        {
            get
            {
                return _golDarah;
            }
            set
            {
                _golDarah = value;
            }
        }
		public SqlString NRP
		{
			get
			{
				return _nRP;
			}
			set
			{
				_nRP = value;
			}
		}


        public SqlString Jabatan
        {
            get
            {
                return _jabatan;
            }
            set
            {
                _jabatan = value;
            }
        }
        public SqlString Kesatuan
        {
            get
            {
                return _kesatuan;
            }
            set
            {
                _kesatuan = value;
            }
        }
        public SqlString AlamatKesatuan
        {
            get
            {
                return _alamatKesatuan;
            }
            set
            {
                _alamatKesatuan = value;
            }
        }



		public SqlString Alamat
		{
			get
			{
				return _alamat;
			}
			set
			{
				_alamat = value;
			}
		}


		public SqlInt32 KelurahanDesaId
		{
			get
			{
				return _kelurahanDesaId;
			}
			set
			{
				_kelurahanDesaId = value;
			}
		}
		public SqlInt32 KelurahanDesaIdOld
		{
			get
			{
				return _kelurahanDesaIdOld;
			}
			set
			{
				_kelurahanDesaIdOld = value;
			}
		}


		public SqlInt32 KecamatanId
		{
			get
			{
				return _kecamatanId;
			}
			set
			{
				_kecamatanId = value;
			}
		}
		public SqlInt32 KecamatanIdOld
		{
			get
			{
				return _kecamatanIdOld;
			}
			set
			{
				_kecamatanIdOld = value;
			}
		}


		public SqlInt32 KabupatenKotaId
		{
			get
			{
				return _kabupatenKotaId;
			}
			set
			{
				_kabupatenKotaId = value;
			}
		}
		public SqlInt32 KabupatenKotaIdOld
		{
			get
			{
				return _kabupatenKotaIdOld;
			}
			set
			{
				_kabupatenKotaIdOld = value;
			}
		}


		public SqlInt32 PropinsiId
		{
			get
			{
				return _propinsiId;
			}
			set
			{
				_propinsiId = value;
			}
		}
		public SqlInt32 PropinsiIdOld
		{
			get
			{
				return _propinsiIdOld;
			}
			set
			{
				_propinsiIdOld = value;
			}
		}


		public SqlString Telepon
		{
			get
			{
				return _telepon;
			}
			set
			{
				_telepon = value;
			}
		}


		public SqlString Fax
		{
			get
			{
				return _fax;
			}
			set
			{
				_fax = value;
			}
		}


		public SqlString Keterangan
		{
			get
			{
				return _keterangan;
			}
			set
			{
				_keterangan = value;
			}
		}


		public SqlInt32 CreatedBy
		{
			get
			{
				return _createdBy;
			}
			set
			{
				SqlInt32 createdByTmp = (SqlInt32)value;
				if(createdByTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedBy", "CreatedBy can't be NULL");
				}
				_createdBy = value;
			}
		}


		public SqlDateTime CreatedDate
		{
			get
			{
				return _createdDate;
			}
			set
			{
				SqlDateTime createdDateTmp = (SqlDateTime)value;
				if(createdDateTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("CreatedDate", "CreatedDate can't be NULL");
				}
				_createdDate = value;
			}
		}


		public SqlInt32 ModifiedBy
		{
			get
			{
				return _modifiedBy;
			}
			set
			{
				_modifiedBy = value;
			}
		}


		public SqlDateTime ModifiedDate
		{
			get
			{
				return _modifiedDate;
			}
			set
			{
				_modifiedDate = value;
			}
		}
		#endregion
	}
}
