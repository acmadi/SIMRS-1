///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'GroupPolicy'
// Generated by LLBLGen v1.21.2003.712 Final on: 16 Oktober 2005, 1:22:11
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace BkNet.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'GroupPolicy'.
	/// </summary>
	public class GroupPolicy : DBInteractionBase
	{
		#region Class Member Declarations
			private SqlInt32		_policyId, _policyIdOld, _groupId, _groupIdOld, _recordId;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public GroupPolicy()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Select method for a foreign key. This method will Select one or more rows from the database, based on the Foreign Key 'GroupId'
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>GroupId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public DataTable SelectAllWGroupIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[GroupPolicy_SelectAllWGroupIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("GroupPolicy");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@GroupId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _groupId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'GroupPolicy_SelectAllWGroupIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GroupPolicy::SelectAllWGroupIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: UpdateData method. This method will Update one existing row in the database.
		/// </summary>
		/// <param name="IsCheck"></param>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>GroupId. May be SqlInt32.Null</LI>
		///		 <LI>PolicyId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		/// 
		public  bool UpdateData(bool IsCheck)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[GroupPolicy_UpdateData]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@GroupId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _groupId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PolicyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _policyId));
				cmdToExecute.Parameters.Add(new SqlParameter("@IsCheck", SqlDbType.Bit, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, IsCheck));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'GroupPolicy_UpdateData' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GroupPolicy::UpdateData::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}

		/// <summary>
		/// Purpose: Delete method for a foreign key. This method will Delete one or more rows from the database, based on the Foreign Key 'GroupId'
		/// </summary>
		/// <returns>True if succeeded, false otherwise. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>GroupId. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public bool DeleteAllWGroupIdLogic()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[GroupPolicy_DeleteAllWGroupIdLogic]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@GroupId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _groupId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'GroupPolicy_DeleteAllWGroupIdLogic' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("GroupPolicy::DeleteAllWGroupIdLogic::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}




		#region Class Property Declarations
		public SqlInt32 RecordId
		{
			get
			{
				return _recordId;
			}
			set
			{
				SqlInt32 recordIdTmp = (SqlInt32)value;
				if(recordIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("RecordId", "RecordId can't be NULL");
				}
				_recordId = value;
			}
		}


		public SqlInt32 GroupId
		{
			get
			{
				return _groupId;
			}
			set
			{
				SqlInt32 groupIdTmp = (SqlInt32)value;
				if(groupIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GroupId", "GroupId can't be NULL");
				}
				_groupId = value;
			}
		}
		public SqlInt32 GroupIdOld
		{
			get
			{
				return _groupIdOld;
			}
			set
			{
				SqlInt32 groupIdOldTmp = (SqlInt32)value;
				if(groupIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("GroupIdOld", "GroupIdOld can't be NULL");
				}
				_groupIdOld = value;
			}
		}


		public SqlInt32 PolicyId
		{
			get
			{
				return _policyId;
			}
			set
			{
				SqlInt32 policyIdTmp = (SqlInt32)value;
				if(policyIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PolicyId", "PolicyId can't be NULL");
				}
				_policyId = value;
			}
		}
		public SqlInt32 PolicyIdOld
		{
			get
			{
				return _policyIdOld;
			}
			set
			{
				SqlInt32 policyIdOldTmp = (SqlInt32)value;
				if(policyIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PolicyIdOld", "PolicyIdOld can't be NULL");
				}
				_policyIdOld = value;
			}
		}
		#endregion
	}
}
