///////////////////////////////////////////////////////////////////////////
// Description: Data Access class for the table 'Menus'
// Generated by LLBLGen v1.21.2003.712 Final on: 17 Oktober 2005, 23:31:49
// Because the Base Class already implements IDispose, this class doesn't.
///////////////////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlTypes;
using System.Data.SqlClient;

namespace BkNet.DataAccess
{
	/// <summary>
	/// Purpose: Data Access class for the table 'Menus'.
	/// </summary>
	public class Menus : DBInteractionBase
	{
		#region Class Member Declarations
		private SqlInt32		_policyId, _policyIdOld, _menuOrder, _menuId, _parentId;
		private SqlString		_menuLink, _menuName, _menuDesc;
		#endregion


		/// <summary>
		/// Purpose: Class constructor.
		/// </summary>
		public Menus()
		{
			// Nothing for now.
		}


		/// <summary>
		/// Purpose: Insert method. This method will insert one new row into the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MenuId</LI>
		///		 <LI>ParentId</LI>
		///		 <LI>PolicyId. May be SqlInt32.Null</LI>
		///		 <LI>MenuName. May be SqlString.Null</LI>
		///		 <LI>MenuDesc. May be SqlString.Null</LI>
		///		 <LI>MenuLink. May be SqlString.Null</LI>
		///		 <LI>MenuOrder. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Insert()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_Insert]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ParentId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _parentId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PolicyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _policyId));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuName));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuDesc", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuLink", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuLink));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuOrder", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuOrder));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_Insert' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::Insert::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Update method. This method will Update one existing row in the database.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MenuId</LI>
		///		 <LI>ParentId</LI>
		///		 <LI>PolicyId. May be SqlInt32.Null</LI>
		///		 <LI>MenuName. May be SqlString.Null</LI>
		///		 <LI>MenuDesc. May be SqlString.Null</LI>
		///		 <LI>MenuLink. May be SqlString.Null</LI>
		///		 <LI>MenuOrder. May be SqlInt32.Null</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Update()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_Update]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ParentId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _parentId));
				cmdToExecute.Parameters.Add(new SqlParameter("@PolicyId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _policyId));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuName", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuName));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuDesc", SqlDbType.VarChar, 255, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuDesc));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuLink", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, _menuLink));
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuOrder", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuOrder));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_Update' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::Update::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Delete method. This method will Delete one existing row in the database, based on the Primary Key.
		/// </summary>
		/// <returns>True if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MenuId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override bool Delete()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_Delete]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				_rowsAffected = cmdToExecute.ExecuteNonQuery();
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_Delete' reported the ErrorCode: " + _errorCode);
				}

				return true;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::Delete::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
			}
		}


		/// <summary>
		/// Purpose: Select method. This method will Select one existing row from the database, based on the Primary Key.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties needed for this method: 
		/// <UL>
		///		 <LI>MenuId</LI>
		/// </UL>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		///		 <LI>MenuId</LI>
		///		 <LI>ParentId</LI>
		///		 <LI>PolicyId</LI>
		///		 <LI>MenuName</LI>
		///		 <LI>MenuDesc</LI>
		///		 <LI>MenuLink</LI>
		///		 <LI>MenuOrder</LI>
		/// </UL>
		/// Will fill all properties corresponding with a field in the table with the value of the row selected.
		/// </remarks>
		public override DataTable SelectOne()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_SelectOne]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Menus");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@MenuId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _menuId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_SelectOne' reported the ErrorCode: " + _errorCode);
				}

				if(toReturn.Rows.Count > 0)
				{
					_menuId = (Int32)toReturn.Rows[0]["MenuId"];
					_parentId = (Int32)toReturn.Rows[0]["ParentId"];
					_policyId = toReturn.Rows[0]["PolicyId"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["PolicyId"];
					_menuName = toReturn.Rows[0]["MenuName"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MenuName"];
					_menuDesc = toReturn.Rows[0]["MenuDesc"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MenuDesc"];
					_menuLink = toReturn.Rows[0]["MenuLink"] == System.DBNull.Value ? SqlString.Null : (string)toReturn.Rows[0]["MenuLink"];
					_menuOrder = toReturn.Rows[0]["MenuOrder"] == System.DBNull.Value ? SqlInt32.Null : (Int32)toReturn.Rows[0]["MenuOrder"];
				}
				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::SelectOne::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		/// <summary>
		/// Purpose: SelectAll method. This method will Select all rows from the table.
		/// </summary>
		/// <returns>DataTable object if succeeded, otherwise an Exception is thrown. </returns>
		/// <remarks>
		/// Properties set after a succesful call of this method: 
		/// <UL>
		///		 <LI>ErrorCode</LI>
		/// </UL>
		/// </remarks>
		public override DataTable SelectAll()
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_SelectAll]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Menus");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_SelectAll' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::SelectAll::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		public DataTable GetMainMenuByUserId(int UserId)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_GetMainMenuByUserId]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Menus");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_GetMainMenuByUserId' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::GetMainMenuByUserId::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}


		public DataTable GetSubMenuByUserId(int UserId)
		{
			SqlCommand	cmdToExecute = new SqlCommand();
			cmdToExecute.CommandText = "dbo.[Menus_GetSubMenuByUserId]";
			cmdToExecute.CommandType = CommandType.StoredProcedure;
			DataTable toReturn = new DataTable("Menus");
			SqlDataAdapter adapter = new SqlDataAdapter(cmdToExecute);

			// Use base class' connection object
			cmdToExecute.Connection = _mainConnection;

			try
			{
				cmdToExecute.Parameters.Add(new SqlParameter("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, UserId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ParentId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, _parentId));
				cmdToExecute.Parameters.Add(new SqlParameter("@ErrorCode", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _errorCode));

				// Open connection.
				_mainConnection.Open();

				// Execute query.
				adapter.Fill(toReturn);
				_errorCode = (SqlInt32)cmdToExecute.Parameters["@ErrorCode"].Value;

				if(_errorCode != (int)LLBLError.AllOk)
				{
					// Throw error.
					throw new Exception("Stored Procedure 'Menus_GetSubMenuByUserId' reported the ErrorCode: " + _errorCode);
				}

				return toReturn;
			}
			catch(Exception ex)
			{
				// some error occured. Bubble it to caller and encapsulate Exception object
				throw new Exception("Menus::GetSubMenuByUserId::Error occured.", ex);
			}
			finally
			{
				// Close connection.
				_mainConnection.Close();
				cmdToExecute.Dispose();
				adapter.Dispose();
			}
		}

		#region Class Property Declarations
		public SqlInt32 MenuId
		{
			get
			{
				return _menuId;
			}
			set
			{
				SqlInt32 menuIdTmp = (SqlInt32)value;
				if(menuIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MenuId", "MenuId can't be NULL");
				}
				_menuId = value;
			}
		}


		public SqlInt32 ParentId
		{
			get
			{
				return _parentId;
			}
			set
			{
				_parentId = value;
			}
		}


		public SqlInt32 PolicyId
		{
			get
			{
				return _policyId;
			}
			set
			{
				SqlInt32 groupIdTmp = (SqlInt32)value;
				if(groupIdTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PolicyId", "PolicyId can't be NULL");
				}
				_policyId = value;
			}
		}
		public SqlInt32 PolicyIdOld
		{
			get
			{
				return _policyIdOld;
			}
			set
			{
				SqlInt32 groupIdOldTmp = (SqlInt32)value;
				if(groupIdOldTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("PolicyIdOld", "PolicyIdOld can't be NULL");
				}
				_policyIdOld = value;
			}
		}


		public SqlString MenuName
		{
			get
			{
				return _menuName;
			}
			set
			{
				SqlString menuNameTmp = (SqlString)value;
				if(menuNameTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MenuName", "MenuName can't be NULL");
				}
				_menuName = value;
			}
		}


		public SqlString MenuDesc
		{
			get
			{
				return _menuDesc;
			}
			set
			{
				SqlString menuDescTmp = (SqlString)value;
				if(menuDescTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MenuDesc", "MenuDesc can't be NULL");
				}
				_menuDesc = value;
			}
		}


		public SqlString MenuLink
		{
			get
			{
				return _menuLink;
			}
			set
			{
				SqlString menuLinkTmp = (SqlString)value;
				if(menuLinkTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MenuLink", "MenuLink can't be NULL");
				}
				_menuLink = value;
			}
		}


		public SqlInt32 MenuOrder
		{
			get
			{
				return _menuOrder;
			}
			set
			{
				SqlInt32 menuOrderTmp = (SqlInt32)value;
				if(menuOrderTmp.IsNull)
				{
					throw new ArgumentOutOfRangeException("MenuOrder", "MenuOrder can't be NULL");
				}
				_menuOrder = value;
			}
		}
		#endregion
	}
}
